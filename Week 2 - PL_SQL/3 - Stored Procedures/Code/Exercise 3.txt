-- Scenario 1


SET SERVEROUTPUT ON;

-- Create procedure to apply monthly interest to all savings accounts
CREATE OR REPLACE PROCEDURE ProcessMonthlyInterest  AS
BEGIN
    UPDATE Accounts
    SET Balance = Balance * 1.01,
        LastModified = SYSDATE
    WHERE AccountType = 'Savings';

    COMMIT;

    DBMS_OUTPUT.PUT_LINE('Monthly interest (1%) applied to all savings accounts successfully.');
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE(' Failed to apply interest: ' || SQLERRM);
END ProcessMonthlyInterest ;
/


EXEC ProcessMonthlyInterest;

select * from accounts;

-- Scenario 2


SET SERVEROUTPUT ON;

-- Create the procedure
CREATE OR REPLACE PROCEDURE UpdateEmployeeBonus (
    p_dept_name IN VARCHAR2,
    p_bonus_percent IN NUMBER
) AS
    v_count NUMBER := 0;
BEGIN
    -- Update salaries in the given department
    UPDATE Employees
    SET Salary = Salary + (Salary * p_bonus_percent / 100)
    WHERE Department = p_dept_name;

    -- Get number of affected rows
    v_count := SQL%ROWCOUNT;

    COMMIT;

    -- Display output
    IF v_count > 0 THEN
        DBMS_OUTPUT.PUT_LINE(' Bonus of ' || p_bonus_percent || '% applied to ' || v_count || 
                             ' employee(s) in department "' || p_dept_name || '".');
    ELSE
        DBMS_OUTPUT.PUT_LINE(' No employees found in department "' || p_dept_name || '".');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE(' Error updating employee bonus: ' || SQLERRM);
END UpdateEmployeeBonus;
/

BEGIN
  UpdateEmployeeBonus('IT', 5);
END;
/

-- Scenario 3
SET SERVEROUTPUT ON;

-- Create the procedure
CREATE OR REPLACE PROCEDURE TransferFunds (
    p_from_account_id IN NUMBER,
    p_to_account_id   IN NUMBER,
    p_amount          IN NUMBER
) AS
    v_from_balance NUMBER;
BEGIN
    -- Check the balance of the source account
    SELECT Balance INTO v_from_balance
    FROM Accounts
    WHERE AccountID = p_from_account_id;

    -- Ensure sufficient balance
    IF v_from_balance < p_amount THEN
        DBMS_OUTPUT.PUT_LINE(' Transfer failed: Insufficient balance in Account ' || p_from_account_id);
        RETURN;
    END IF;

    -- Deduct from source account
    UPDATE Accounts
    SET Balance = Balance - p_amount,
        LastModified = SYSDATE
    WHERE AccountID = p_from_account_id;

    -- Add to destination account
    UPDATE Accounts
    SET Balance = Balance + p_amount,
        LastModified = SYSDATE
    WHERE AccountID = p_to_account_id;

    -- Commit the transaction
    COMMIT;

    DBMS_OUTPUT.PUT_LINE(' '|| p_amount || ' transferred from Account ' || 
                         p_from_account_id || ' to Account ' || p_to_account_id);

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE(' One of the accounts does not exist.');

    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE(' Transfer failed due to unexpected error: ' || SQLERRM);
END TransferFunds;
/

BEGIN
    TransferFunds(1, 2, 500);
END;
/

