
-- SCENARIO 1

SET SERVEROUTPUT ON;
CREATE OR REPLACE PACKAGE CustomerManagement IS
    PROCEDURE AddNewCustomer(
        p_customer_id IN CUSTOMERS.CUSTOMERID%TYPE,
        p_name IN CUSTOMERS.NAME%TYPE,
        p_dob IN CUSTOMERS.DOB%TYPE,
        p_balance IN CUSTOMERS.BALANCE%TYPE
    );

    PROCEDURE UpdateCustomerDetails(
        p_customer_id IN CUSTOMERS.CUSTOMERID%TYPE,
        p_name IN CUSTOMERS.NAME%TYPE,
        p_dob IN CUSTOMERS.DOB%TYPE,
        p_balance IN CUSTOMERS.BALANCE%TYPE
    );

    FUNCTION GetCustomerBalance(
        p_customer_id IN CUSTOMERS.CUSTOMERID%TYPE
    ) RETURN CUSTOMERS.BALANCE%TYPE;
END CustomerManagement;
/

SET SERVEROUTPUT ON;
CREATE OR REPLACE PACKAGE BODY CUSTOMERMANAGEMENT IS

    PROCEDURE ADDNEWCUSTOMER(
        P_CUSTOMER_ID IN CUSTOMERS.CUSTOMERID%TYPE,
        P_NAME IN CUSTOMERS.NAME%TYPE,
        P_DOB IN CUSTOMERS.DOB%TYPE,
        P_BALANCE IN CUSTOMERS.BALANCE%TYPE
    ) IS
    BEGIN
        INSERT INTO CUSTOMERS (CUSTOMERID, NAME, DOB, BALANCE, LASTMODIFIED)
        VALUES (P_CUSTOMER_ID, P_NAME, P_DOB, P_BALANCE, SYSDATE);
    END ADDNEWCUSTOMER;

    PROCEDURE UPDATECUSTOMERDETAILS(
        P_CUSTOMER_ID IN CUSTOMERS.CUSTOMERID%TYPE,
        P_NAME IN CUSTOMERS.NAME%TYPE,
        P_DOB IN CUSTOMERS.DOB%TYPE,
        P_BALANCE IN CUSTOMERS.BALANCE%TYPE
    ) IS
    BEGIN
        UPDATE CUSTOMERS
        SET NAME = P_NAME,
            DOB = P_DOB,
            BALANCE = P_BALANCE,
            LASTMODIFIED = SYSDATE
        WHERE CUSTOMERID = P_CUSTOMER_ID;
    END UPDATECUSTOMERDETAILS;

    FUNCTION GETCUSTOMERBALANCE(
        P_CUSTOMER_ID IN CUSTOMERS.CUSTOMERID%TYPE
    ) RETURN CUSTOMERS.BALANCE%TYPE IS
        V_BALANCE CUSTOMERS.BALANCE%TYPE;
    BEGIN
        SELECT BALANCE INTO V_BALANCE
        FROM CUSTOMERS
        WHERE CUSTOMERID = P_CUSTOMER_ID;
        RETURN V_BALANCE;
    END GETCUSTOMERBALANCE;

END CUSTOMERMANAGEMENT;
/


--SCENARIO 2

SET SERVEROUTPUT ON;
CREATE OR REPLACE PACKAGE EMPLOYEEMANAGEMENT IS
    PROCEDURE HIREEMPLOYEE(
        P_EMPLOYEE_ID IN EMPLOYEES.EMPLOYEEID%TYPE,
        P_NAME IN EMPLOYEES.NAME%TYPE,
        P_POSITION IN EMPLOYEES.POSITION%TYPE,
        P_SALARY IN EMPLOYEES.SALARY%TYPE,
        P_DEPARTMENT IN EMPLOYEES.DEPARTMENT%TYPE,
        P_HIRE_DATE IN EMPLOYEES.HIREDATE%TYPE
    );

    PROCEDURE UPDATEEMPLOYEEDETAILS(
        P_EMPLOYEE_ID IN EMPLOYEES.EMPLOYEEID%TYPE,
        P_NAME IN EMPLOYEES.NAME%TYPE,
        P_POSITION IN EMPLOYEES.POSITION%TYPE,
        P_SALARY IN EMPLOYEES.SALARY%TYPE,
        P_DEPARTMENT IN EMPLOYEES.DEPARTMENT%TYPE
    );

    FUNCTION CALCULATEANNUALSALARY(
        P_EMPLOYEE_ID IN EMPLOYEES.EMPLOYEEID%TYPE
    ) RETURN NUMBER;
END EMPLOYEEMANAGEMENT;
/

SET SERVEROUTPUT ON;
CREATE OR REPLACE PACKAGE BODY EMPLOYEEMANAGEMENT IS

    PROCEDURE HIREEMPLOYEE(
        P_EMPLOYEE_ID IN EMPLOYEES.EMPLOYEEID%TYPE,
        P_NAME IN EMPLOYEES.NAME%TYPE,
        P_POSITION IN EMPLOYEES.POSITION%TYPE,
        P_SALARY IN EMPLOYEES.SALARY%TYPE,
        P_DEPARTMENT IN EMPLOYEES.DEPARTMENT%TYPE,
        P_HIRE_DATE IN EMPLOYEES.HIREDATE%TYPE
    ) IS
    BEGIN
        INSERT INTO EMPLOYEES (EMPLOYEEID, NAME, POSITION, SALARY, DEPARTMENT, HIREDATE)
        VALUES (P_EMPLOYEE_ID, P_NAME, P_POSITION, P_SALARY, P_DEPARTMENT, P_HIRE_DATE);
    END HIREEMPLOYEE;

    PROCEDURE UPDATEEMPLOYEEDETAILS(
        P_EMPLOYEE_ID IN EMPLOYEES.EMPLOYEEID%TYPE,
        P_NAME IN EMPLOYEES.NAME%TYPE,
        P_POSITION IN EMPLOYEES.POSITION%TYPE,
        P_SALARY IN EMPLOYEES.SALARY%TYPE,
        P_DEPARTMENT IN EMPLOYEES.DEPARTMENT%TYPE
    ) IS
    BEGIN
        UPDATE EMPLOYEES
        SET NAME = P_NAME,
            POSITION = P_POSITION,
            SALARY = P_SALARY,
            DEPARTMENT = P_DEPARTMENT
        WHERE EMPLOYEEID = P_EMPLOYEE_ID;
    END UPDATEEMPLOYEEDETAILS;

    FUNCTION CALCULATEANNUALSALARY(
        P_EMPLOYEE_ID IN EMPLOYEES.EMPLOYEEID%TYPE
    ) RETURN NUMBER IS
        V_SALARY EMPLOYEES.SALARY%TYPE;
    BEGIN
        SELECT SALARY INTO V_SALARY
        FROM EMPLOYEES
        WHERE EMPLOYEEID = P_EMPLOYEE_ID;
        RETURN V_SALARY * 12; -- Assuming salary is monthly
    END CALCULATEANNUALSALARY;

END EMPLOYEEMANAGEMENT;
/

-- SCENARIO 3

SET SERVEROUTPUT ON;
CREATE OR REPLACE PACKAGE ACCOUNTOPERATIONS IS
    PROCEDURE OPENNEWACCOUNT(
        P_ACCOUNT_ID IN ACCOUNTS.ACCOUNTID%TYPE,
        P_CUSTOMER_ID IN ACCOUNTS.CUSTOMERID%TYPE,
        P_ACCOUNT_TYPE IN ACCOUNTS.ACCOUNTTYPE%TYPE,
        P_BALANCE IN ACCOUNTS.BALANCE%TYPE
    );

    PROCEDURE CLOSEACCOUNT(
        P_ACCOUNT_ID IN ACCOUNTS.ACCOUNTID%TYPE
    );

    FUNCTION GETTOTALBALANCE(
        P_CUSTOMER_ID IN ACCOUNTS.CUSTOMERID%TYPE
    ) RETURN NUMBER;
END ACCOUNTOPERATIONS;
/

SET SERVEROUTPUT ON;
CREATE OR REPLACE PACKAGE BODY ACCOUNTOPERATIONS IS

    PROCEDURE OPENNEWACCOUNT(
        P_ACCOUNT_ID IN ACCOUNTS.ACCOUNTID%TYPE,
        P_CUSTOMER_ID IN ACCOUNTS.CUSTOMERID%TYPE,
        P_ACCOUNT_TYPE IN ACCOUNTS.ACCOUNTTYPE%TYPE,
        P_BALANCE IN ACCOUNTS.BALANCE%TYPE
    ) IS
    BEGIN
        INSERT INTO ACCOUNTS (ACCOUNTID, CUSTOMERID, ACCOUNTTYPE, BALANCE, LASTMODIFIED)
        VALUES (P_ACCOUNT_ID, P_CUSTOMER_ID, P_ACCOUNT_TYPE, P_BALANCE, SYSDATE);
    END OPENNEWACCOUNT;

    PROCEDURE CLOSEACCOUNT(
        P_ACCOUNT_ID IN ACCOUNTS.ACCOUNTID%TYPE
    ) IS
    BEGIN
        DELETE FROM ACCOUNTS
        WHERE ACCOUNTID = P_ACCOUNT_ID;
    END CLOSEACCOUNT;

    FUNCTION GETTOTALBALANCE(
        P_CUSTOMER_ID IN ACCOUNTS.CUSTOMERID%TYPE
    ) RETURN NUMBER IS
        V_TOTAL_BALANCE NUMBER;
    BEGIN
        SELECT SUM(BALANCE) INTO V_TOTAL_BALANCE
        FROM ACCOUNTS
        WHERE CUSTOMERID = P_CUSTOMER_ID;
        RETURN V_TOTAL_BALANCE;
    END GETTOTALBALANCE;

END ACCOUNTOPERATIONS;
/