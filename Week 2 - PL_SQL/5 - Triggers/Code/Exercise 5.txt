-- Scenario 1

-- Creating tigger
CREATE OR REPLACE TRIGGER UpdateCustomerLastModified
BEFORE UPDATE ON Customers
FOR EACH ROW
BEGIN
    :NEW.LastModified := SYSDATE;
    DBMS_OUTPUT.PUT_LINE('LAST MODIFIED UPDATED');
END;
/

-- Update a customer
UPDATE Customers
SET Name = 'Fernando Alonso', DOB = TO_DATE('16-05-1985','DD-MM-YYYY')
WHERE CustomerID = 1;


SELECT * FROM Customers WHERE CustomerID = 1;

-- Scenario 2


CREATE TABLE AUDITLOG (
    LOGID           NUMBER PRIMARY KEY,
    TRANSACTIONID   NUMBER,
    ACCOUNTID       NUMBER,
    TRANSACTIONDATE DATE,
    AMOUNT          NUMBER,
    TRANSACTIONTYPE VARCHAR2(10),
    LOGTIMESTAMP    DATE DEFAULT SYSDATE
);

SELECT * FROM TRANSACTIONS;

CREATE SEQUENCE AUDITLOG_SEQ 
START WITH 1 
INCREMENT BY 1;

SET SERVEROUTPUT ON;
CREATE OR REPLACE TRIGGER LOGTRANSACTIONS
AFTER INSERT ON TRANSACTIONS
FOR EACH ROW
BEGIN
    INSERT INTO AUDITLOG (LOGID, TRANSACTIONID, ACCOUNTID, TRANSACTIONDATE, AMOUNT, TRANSACTIONTYPE)
    VALUES (AUDITLOG_SEQ.NEXTVAL, :NEW.TRANSACTIONID, :NEW.ACCOUNTID, SYSDATE, :NEW.AMOUNT, :NEW.TRANSACTIONTYPE);
    DBMS_OUTPUT.PUT_LINE('INSERT SUCCESSFUL');
END LOGTRANSACTIONS;
/

INSERT INTO TRANSACTIONS (TRANSACTIONID, ACCOUNTID, TRANSACTIONDATE, AMOUNT, TRANSACTIONTYPE)
VALUES (9, 2, SYSDATE, 600, 'Deposit');

INSERT INTO TRANSACTIONS (TRANSACTIONID, ACCOUNTID, TRANSACTIONDATE, AMOUNT, TRANSACTIONTYPE)
VALUES (14, 1, SYSDATE, 2600, 'Deposit');

SELECT * FROM AUDITLOG;
SELECT * FROM TRANSACTIONS;


-- Scenario 3

SET SERVEROUTPUT ON;

CREATE OR REPLACE TRIGGER CheckTransactionRules
BEFORE INSERT ON Transactions
FOR EACH ROW
DECLARE
    v_balance NUMBER;
BEGIN
    -- Get the current balance of the account
    SELECT Balance INTO v_balance
    FROM Accounts
    WHERE AccountID = :NEW.AccountID;

    -- Withdrawal
    IF :NEW.TransactionType = 'Withdrawal' THEN
        IF :NEW.Amount > v_balance THEN
            RAISE_APPLICATION_ERROR(-20001, 'Withdrawal amount exceeds current balance.');
        END IF;
    ELSIF :NEW.TransactionType = 'Deposit' THEN
        -- Deposit
        IF :NEW.Amount <= 0 THEN
            RAISE_APPLICATION_ERROR(-20002, 'Deposit amount must be greater than zero.');
        END IF;
    ELSE
        -- neither Withdrawal nor Deposit
        RAISE_APPLICATION_ERROR(-20003, 'Invalid transaction type.');
    END IF;
END;
/
-- true case
INSERT INTO Transactions (TransactionID, AccountID, TransactionDate, Amount, TransactionType)
VALUES (8, 1, SYSDATE, 500, 'Deposit');

-- false case
INSERT INTO Transactions (TransactionID, AccountID, TransactionDate, Amount, TransactionType)
VALUES (9, 1, SYSDATE, -100, 'Deposit');

-- false case
INSERT INTO Transactions (TransactionID, AccountID, TransactionDate, Amount, TransactionType)
VALUES (10, 1, SYSDATE, 999999, 'Withdrawal');
